import { promises as fs } from 'node:fs'
import { describe, expect, it } from 'vitest'
import { toLF } from '@s3xysteak/utils'
import { expGenerator } from '@/core/generator'

describe('generate', () => {
  it('expGenerator should work with TS', async () => {
    const exportList = ['custom', 'two', 'getThree', 'funcIndex', 'ClassIndex', 'func3', 'func2', 'func1', 'fRe'].sort()

    const target = `
export const one = 1
export const two = 2
export const getThree = () => 3
export function funcIndex() {}
export class ClassIndex {}

export type NumOrStr = number | string

export * from './core/func1'
export * from './core/func2'

export * from '@s3xysteak/utils'

// --- Auto-Generated By Unplugin-Export-Collector ---

const __UnExportList = ${JSON.stringify(exportList)} as const

/**
 * @returns - Call in \`resolvers\` option of \`unplugin-auto-import\`.
 */
export function autoImport(map?: Partial<{ [K in typeof __UnExportList[number]]: string }>) {
  return (name: string) => {
    if (!__UnExportList.includes(name as any))
      return

    return map && (map as any)[name]
      ? {
          name,
          as: (map as any)[name],
          from: 'unplugin-export-collector',
        }
      : {
          name,
          from: 'unplugin-export-collector',
        }
  }
}

// --- Auto-Generated By Unplugin-Export-Collector ---
`

    await expGenerator('./test/parser-lab/generatorTest.ts', { include: ['custom'], exclude: ['one'] })

    const result = await fs.readFile('./test/parser-lab/generatorTest.ts', 'utf-8')

    expect(toLF(result)).toBe(`${target.trim()}\n`)
  })

  it('expGenerator should work with JS', async () => {
    const exportList = ['custom', 'two', 'getThree', 'funcIndex', 'ClassIndex', 'func3', 'func2', 'func1', 'fRe'].sort()

    const target = `
export const one = 1
export const two = 2
export const getThree = () => 3
export function funcIndex() {}
export class ClassIndex {}

export * from './core/func1'
export * from './core/func2'

export * from '@s3xysteak/utils'

// --- Auto-Generated By Unplugin-Export-Collector ---

const __UnExportList = /** @type {const} */ (${JSON.stringify(exportList)})

/**
 * @param {Partial<{ [K in typeof __UnExportList[number]]: string }>} [map]
 * @returns - Call in \`resolvers\` option of \`unplugin-auto-import\`.
 */
export function autoImport(map) {
  /** @param {string} name */
  const func = (name) => {
    if (!__UnExportList.includes(name))
      return

    return map && map[name]
      ? {
          name,
          as: map[name],
          from: 'unplugin-export-collector',
        }
      : {
          name,
          from: 'unplugin-export-collector',
        }
  }
  return func
}

// --- Auto-Generated By Unplugin-Export-Collector ---
`

    await expGenerator('./test/parser-lab/generatorTest.js', { include: ['custom'], exclude: ['one'], typescript: false })

    const result = await fs.readFile('./test/parser-lab/generatorTest.js', 'utf-8')

    expect(toLF(result)).toBe(`${target.trim()}\n`)
  })

  it('expGenerator should work with writeTo option', async () => {
    const exportList = ['custom', 'two', 'getThree', 'funcIndex', 'ClassIndex', 'func3', 'func2', 'func1', 'fRe'].sort()

    const target = `// --- Auto-Generated By Unplugin-Export-Collector ---

const __UnExportList = ${JSON.stringify(exportList)} as const

/**
 * @returns - Call in \`resolvers\` option of \`unplugin-auto-import\`.
 */
export function autoImport(map?: Partial<{ [K in typeof __UnExportList[number]]: string }>) {
  return (name: string) => {
    if (!__UnExportList.includes(name as any))
      return

    return map && (map as any)[name]
      ? {
          name,
          as: (map as any)[name],
          from: 'unplugin-export-collector',
        }
      : {
          name,
          from: 'unplugin-export-collector',
        }
  }
}

// --- Auto-Generated By Unplugin-Export-Collector ---
`

    await expGenerator('./test/parser-lab/generatorTest.ts', { include: ['custom'], exclude: ['one'], writeTo: './test/parser-lab/generatorTestWithWriteTo' })

    const result = await fs.readFile('./test/parser-lab/generatorTestWithWriteTo.ts', 'utf-8')

    expect(toLF(result)).toBe(`${target.trim()}\n`)
  })
})
