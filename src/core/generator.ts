import process from 'node:process'
import { promises as fs } from 'node:fs'
import { isUndefined } from '@s3xysteak/utils'
import { resolve } from 'pathe'
import { expCollector } from './parser'
import { findPath, getPkg } from './utils'

const comment = '// --- Auto-Generated By Unplugin-Export-Collector ---'
const firstIndex = (content: string) => content.indexOf(comment)
const lastIndex = (content: string) => content.lastIndexOf(comment) + comment.length

interface ExpGeneratorDataOptions {
  base: string
  pkgName: string
  include: string[]
  exclude: string[]
  rename: string
  typescript: boolean
}

export interface ExpGeneratorOptions extends ExpGeneratorDataOptions {
  writeTo: string
}

export async function expGenerator(path: string, options: Partial<ExpGeneratorOptions> = {}) {
  const {
    data,
    dataRaw,
    targetPath,
    pkgContext: { isTs },
  } = await expGeneratorData(path, options)

  const { base = process.cwd() } = options

  if (isUndefined(options?.writeTo))
    return await fs.writeFile(targetPath, data)

  const extension = (path: string) => /\.\w+?$/.test(path)
    ? path
    : `${path}.${isTs ? 'ts' : 'js'}`

  const writeTo = resolve(base, extension(options.writeTo))

  await fs.writeFile(writeTo, dataRaw)
}

export async function expGeneratorData(path: string, options?: Partial<ExpGeneratorDataOptions>) {
  const { raw: pkg, isTs } = await getPkg()

  const {
    base = process.cwd(),
    pkgName = pkg.name,
    include = [],
    exclude = [],
    rename = 'autoImport',
    typescript = isTs,
  } = options ?? {}

  exclude.push(rename)

  const targetPath = await findPath(path, base)

  const expList = await expCollector(path, base)
  let content = await fs.readFile(targetPath, 'utf-8')

  const _firstComment = firstIndex(content)

  if (_firstComment === -1) {
    content = `${content}\n
${comment}
${comment}
`
  }

  const firstComment = firstIndex(content)
  const lastComment = lastIndex(content)

  const exportList = [...expList, ...include].filter(i => !exclude.includes(i)).sort()

  const getTemplate = (body: string) => `
${content.substring(0, firstComment).trim()}

${comment}

${body.trim()}

${comment}

${content.substring(lastComment).trim()}
`

  const rawTs = `
const __UnExportList = ${JSON.stringify(exportList)} as const

/**
 * @returns Use in \`imports\` option of unplugin-auto-import.
 */
export function ${rename}(map?: Partial<{ [K in typeof __UnExportList[number]]: string }>): Record<string, (string | [string, string])[]> {
  return {
    '${pkgName}': __UnExportList.map(v => map && map[v] ? [v, map[v]] as [string, string] : v),
  }
}
`
  const TS = getTemplate(rawTs)

  const rawJs = `
const __UnExportList = /** @type {const} */ (${JSON.stringify(exportList)})

/**
 * @param {Partial<{ [K in typeof __UnExportList[number]]: string }>} [map]
 * @returns {Record<string, (string | [string, string])[]>} Use in \`imports\` option of \`unplugin-auto-import\`.
 */ 
export function ${rename}(map) {
  return {
    '${pkgName}': __UnExportList.map(v => map && map[v] ? [v, map[v]] : v),
  }
}
`
  const JS = getTemplate(rawJs)

  const val = typescript ? TS : JS
  const valRaw = typescript ? rawTs : rawJs
  const dataRaw = `${comment}

${valRaw.trim()}

${comment}
`

  return {
    data: `${val.trim()}\n`,
    dataRaw,
    targetPath,
    pkgContext: {
      pkg,
      isTs,
    },
  }
}
